<?php
/**
 * Cart
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sylius Shop API
 *
 * Sylius Shop API documentation
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lukasz.chrusciel@sylius.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Cart Class Doc Comment
 *
 * @category Class
 * @description Cart with information about items, current state, totals and more.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cart implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Cart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'token_value' => 'string',
        'channel' => 'string',
        'currency' => 'string',
        'locale' => 'string',
        'checkout_state' => 'string',
        'items' => '\Swagger\Client\Model\CartItem[]',
        'totals' => '\Swagger\Client\Model\TotalsView',
        'shipping_address' => '\Swagger\Client\Model\Address',
        'billing_address' => '\Swagger\Client\Model\Address',
        'payments' => '\Swagger\Client\Model\Payment[]',
        'shipments' => '\Swagger\Client\Model\Shipment[]',
        'cart_discounts' => '\Swagger\Client\Model\CartCartDiscounts[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'token_value' => null,
        'channel' => null,
        'currency' => null,
        'locale' => null,
        'checkout_state' => null,
        'items' => null,
        'totals' => null,
        'shipping_address' => null,
        'billing_address' => null,
        'payments' => null,
        'shipments' => null,
        'cart_discounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_value' => 'tokenValue',
        'channel' => 'channel',
        'currency' => 'currency',
        'locale' => 'locale',
        'checkout_state' => 'checkoutState',
        'items' => 'items',
        'totals' => 'totals',
        'shipping_address' => 'shippingAddress',
        'billing_address' => 'billingAddress',
        'payments' => 'payments',
        'shipments' => 'shipments',
        'cart_discounts' => 'cartDiscounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_value' => 'setTokenValue',
        'channel' => 'setChannel',
        'currency' => 'setCurrency',
        'locale' => 'setLocale',
        'checkout_state' => 'setCheckoutState',
        'items' => 'setItems',
        'totals' => 'setTotals',
        'shipping_address' => 'setShippingAddress',
        'billing_address' => 'setBillingAddress',
        'payments' => 'setPayments',
        'shipments' => 'setShipments',
        'cart_discounts' => 'setCartDiscounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_value' => 'getTokenValue',
        'channel' => 'getChannel',
        'currency' => 'getCurrency',
        'locale' => 'getLocale',
        'checkout_state' => 'getCheckoutState',
        'items' => 'getItems',
        'totals' => 'getTotals',
        'shipping_address' => 'getShippingAddress',
        'billing_address' => 'getBillingAddress',
        'payments' => 'getPayments',
        'shipments' => 'getShipments',
        'cart_discounts' => 'getCartDiscounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CHECKOUT_STATE_CART = 'cart';
    const CHECKOUT_STATE_ADDRESSED = 'addressed';
    const CHECKOUT_STATE_SHIPPING_SELECTED = 'shipping_selected';
    const CHECKOUT_STATE_PAYMENT_SELECTED = 'payment_selected';
    const CHECKOUT_STATE_COMPLETED = 'completed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCheckoutStateAllowableValues()
    {
        return [
            self::CHECKOUT_STATE_CART,
            self::CHECKOUT_STATE_ADDRESSED,
            self::CHECKOUT_STATE_SHIPPING_SELECTED,
            self::CHECKOUT_STATE_PAYMENT_SELECTED,
            self::CHECKOUT_STATE_COMPLETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_value'] = isset($data['token_value']) ? $data['token_value'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['checkout_state'] = isset($data['checkout_state']) ? $data['checkout_state'] : 'cart';
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['totals'] = isset($data['totals']) ? $data['totals'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['cart_discounts'] = isset($data['cart_discounts']) ? $data['cart_discounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCheckoutStateAllowableValues();
        if (!is_null($this->container['checkout_state']) && !in_array($this->container['checkout_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'checkout_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_value
     *
     * @return string
     */
    public function getTokenValue()
    {
        return $this->container['token_value'];
    }

    /**
     * Sets token_value
     *
     * @param string $token_value token_value
     *
     * @return $this
     */
    public function setTokenValue($token_value)
    {
        $this->container['token_value'] = $token_value;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Code of the cart currency according to ISO 4217. This value is inherited from channel
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Code of the cart locale. This value is inherited from channel
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets checkout_state
     *
     * @return string
     */
    public function getCheckoutState()
    {
        return $this->container['checkout_state'];
    }

    /**
     * Sets checkout_state
     *
     * @param string $checkout_state Current state of a checkout.
     *
     * @return $this
     */
    public function setCheckoutState($checkout_state)
    {
        $allowedValues = $this->getCheckoutStateAllowableValues();
        if (!is_null($checkout_state) && !in_array($checkout_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'checkout_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['checkout_state'] = $checkout_state;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\CartItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\CartItem[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets totals
     *
     * @return \Swagger\Client\Model\TotalsView
     */
    public function getTotals()
    {
        return $this->container['totals'];
    }

    /**
     * Sets totals
     *
     * @param \Swagger\Client\Model\TotalsView $totals totals
     *
     * @return $this
     */
    public function setTotals($totals)
    {
        $this->container['totals'] = $totals;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Swagger\Client\Model\Address $shipping_address shipping_address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \Swagger\Client\Model\Address $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Swagger\Client\Model\Payment[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Swagger\Client\Model\Payment[] $payments payments
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Swagger\Client\Model\Shipment[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Swagger\Client\Model\Shipment[] $shipments shipments
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets cart_discounts
     *
     * @return \Swagger\Client\Model\CartCartDiscounts[]
     */
    public function getCartDiscounts()
    {
        return $this->container['cart_discounts'];
    }

    /**
     * Sets cart_discounts
     *
     * @param \Swagger\Client\Model\CartCartDiscounts[] $cart_discounts cart_discounts
     *
     * @return $this
     */
    public function setCartDiscounts($cart_discounts)
    {
        $this->container['cart_discounts'] = $cart_discounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


